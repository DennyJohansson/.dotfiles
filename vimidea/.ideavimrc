" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc
"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" :actionlist to view all available actions. Enable "Track Action Ids" to see
"" the action id after each action
"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
set scrolloff=5
" Do incremental searching.
set incsearch
" nobody wants that bell!
set visualbell
" Don't use Ex mode, use Q for formatting.
map Q gq
" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
" Highlight copied text
Plug 'machakann/vim-highlightedyank'
Plug 'preservim/nerdtree'
" ---g Commentary plugin
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'

set NERDTree
filetype plugin indent on
let mapleader=" "
set relativenumber
set number
" [V]im [F]ind [A]action
nmap <leader>vfa <Action>(VimFindActionIdAction)
" [B]reakpoint
nmap <leader>b <Action>(ToggleLineBreakpoint)
" [P]roject [V]iew
nmap <leader>pv :NERDTreeToggle<CR>

nmap <C-i> :action Forward<CR>
nmap <C-o> :action Back<CR>

" TESTING
nmap <leader>bb <Action>(ToggleLineBreakpoint)

" [P]roject [N]ext
nmap <leader>pn <Action>(NextWindow)
" [T]est [D]ebug [C]lass
" [T]est [D]ebug
nmap <leader>td <Action>(Debug)
nmap <leader>tdn <Action>(DebugClass)
"" [T]est [N]earest (normally but in intelliJ it would be prev)
nmap <leader>tt <Action>(Run)
nmap <leader>ttn <Action>(RunClass)
nmap <leader>f <Action>(ReformatCode)

nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

nmap <C-d> <C-d>zz
nmap <C-u> <C-u>zz
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)

nmap ]d <Action>(GotoNextError)
nmap [d <Action>(GotoPreviousError)

nmap [<space> O<ESC>j
nmap ]<space> o<ESC>k

vmap <leader>y "+y
vmap <leader>p "+p

vmap J :m '>+1<CR>gv=gv
vmap K :m '<-2<CR>gv=gv

" [S]earch [F]ile
nmap <leader>sf <Action>(GotoFile)
" [S]earch [C]lass
nmap <leader>sc <Action>(GotoClass)
" [S]earch [G]rep
nmap <leader>sg <Action>(TextSearchAction)
" [S]earch [R]esume
nmap <leader>sr <Action>(SearchEverywhere)
" Bookmarks
" mA - project scope
" ma - file scope
" 'a - go to file scope mark at a
" 'A - project scoped
" [S]earch [B]ookmarks
nmap <leader>sb <Action>(ShowBookmarks)
" * search word under cursor forward, # backwards
" refactor
" [R]e[N]ame
nmap <leader>rn <Action>(RenameElement)
" [G]oto [R]eference
nmap grr <Action>(FindUsages)
nmap grt <Action>(GotoTypeDeclaration)

nmap <C-j> <Action>(NextOccurence)
nmap <C-k> <Action>(PreviousOccurence)

" [C]ode [A]ction
nmap <leader>ca <Action>(ShowIntentionActions)

" [L]eader [H]elp
nmap <leader>lh <Action>(ShowErrorDescription)
" [S]how [D]iagnostic
nmap <leader>sd <Action>(ShowErrorDescription)

nnoremap <space><space> :action RecentFiles<CR>
" [V]iew [T]erminal
nmap <leader>vt <Action>(ActivateTerminalToolWindow)
" [Z][Z]en
nnoremap <leader>zz :action ToggleDistractionFreeMode<CR>
" [G]it [A]ction
nnoremap <Leader>ga :action Vcs.QuickListPopupAction<CR>
" [G]it [B]ranches
nnoremap <Leader>gb :action Vcs.ShowBranches<CR>

function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

" Harpooner
"nmap <leader>a <action>(HarpoonerToggleFile)
"nmap <C-e> <action>(HarpoonerToggleQuickMenu)
"nmap <M-h> <action>(HarpoonerOpenFile0)
"nmap <M-j> <action>(HarpoonerOpenFile1)
"nmap <M-l> <action>(HarpoonerOpenFile2)
"nmap <M-;> <action>(HarpoonerOpenFile3)
"nmap <leader>hn <action>(HarpoonerNextFileAction)
"nmap <leader>hp <action>(HarpoonerPreviousFileAction)
"nmap <leader>hc <action>(HarpoonerClearMenu)
" HarpoonIJ
nmap <leader>a <action>(AddToHarpoon)
nmap <C-e> <action>(ShowHarpoon)
" nmap <leader>hn <action>(HarpoonerNextFileAction)
" nmap <leader>hp <action>(HarpoonerPreviousFileAction)
" -- [h][t][n][s] are the default keys for navigation, all the keys are right hand accessible
"nmap <C-h> <action>(GoToHarpoon[1])
"nmap <C-t> <action>(GoToHarpoon[2])
"nmap <C-n> <action>(GoToHarpoon[3])
"nmap <C-s> <action>(GoToHarpoon[4])

" Run
nmap <leader>rt <action>(Run)
nmap <leader>rd <action>(Debug)
" Hierarchy
map <leader>th :action TypeHierarchy<CR>
" Show recent changed files,
" leader [G]it [S]earch
nmap <leader>gs <Action>(ActivateCommitToolWindow)
" Recent changes
" [U]ndo
nmap <leader>u (RecentChanges)
" [G]enerate [C]ode
map <leader>gc <Action>(Generate)
" [I]intellJ [G]o to [T]est -- command + shift + t
map <leader>igt <Action>(GoToTest)
" don't want H
" map H h
" Popup navigation (refactor)
map <c-n> <Action>(EditorDown)
map <c-p> <Action>(EditorUp)

" [I]ntelliJ [I]nline
map <leader>ii <Action>(Inline)
" [I]ntelliJ [E]xtract
map <leader>ie <Action>(ExtractMethod)
" [I]ntelliJ [S]ettings
map <leader>is <Action>(WelcomeScreen.Settings)
" [Z]oom [I]n
nmap <d-=> <Action>(ZoomInIdeAction)
" [Z]oom [O]ut
nmap <d--> <Action>(ZoomOutIdeAction)

nmap <leader>lh <Action>(ErrorDescription)
" In insert mode, Ctrl-Y accepts the current completion
"inoremap <C-y> <C-o>:action EditorChooseLookupItem<CR>
imap <C-y> <Action>(EditorChooseLookupItemReplace)
